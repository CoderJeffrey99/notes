//
//  WMThreadViewController.h
//  WMGameProxy
//
//  Created by 谢吴军 on 2020/3/16.
//  Copyright © 2020 zali. All rights reserved.
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

/*
 1.进程和线程
 // 进程
 1>.在系统中正在运行的一个应用程序
 2>.有状态（一个未运行的应用程序不是进程）
 3>.相互独立
 4>.一个应用程序可以对应多个进程
 5>.一个进程可以有多个线程（至少有一个线程/同一个进程内的线程共享进程的资源）
 6>.进程是CPU资源分配的基本单位（CPU给进程分配资源、进程类似于车间）
 // 线程
 1>.进程中所有的任务都是在线程中执行的
 2>.进程需要执行任务起码需要一个线程
 3>.线程是CPU调度（执行任务）的最小单位（线程类似于工人）
 */

/*
 2.多线程
 1>.概念：一个进程中可以开启多条线程，每条线程之间可以并行（同时）执行不同的任务（一条线程内部是串行执行任务）
 2>.作用：为了使界面流畅，防止界面假死、网络请求、SDWebImage图片下载
 a.可以适当提高程序的执行效率
 b.可以适当提高资源利用率（CPU、内存利用率）
 c.创建线程需要花费时间和内存（大量开启线程会降低程序的性能）
 d.开启线程越多CPU调度上的开销越大
 e.多条线程同时访问同一块数据会出现资源抢占问题
 3>.原理
 a.同一时间CPU只能处理一条线程（只有一条线程在工作）
 b.多线程并行其实就是CPU快速在多条线程之间调度切换（并行是假象，这个只相对于“单CPU”而言，如果是“多核”就可以实现真正意义的多线程）/ 1s---1000个0.001s
 4>.注意：如果线程开启的特别多：CPU会在N条线程之间调度，消耗大量的CPU资源/一般开启3-5条线程
 5>.优缺点
 优点：1.使程序应用响应速度更快，用户界面在进行其它工作时仍保持活动状态，提高程序执行效率
 缺点：开启大量线程降低程序的性能，管理大量线程需要额外的cpu开销
 */

/*
 3.主线程：系统默认开启/不可以手动开启
 1>.程序运行后会默认开启一条线程，我们称为“主线程/UI线程”
 2>.作用：“显示/刷新”UI界面/处理UI事件（点击事件/滚动事件/拖拽事件）
 3>.注意：不要将耗时操作放在主线程中（线程内部是串行执行任务的）
 */

/*
 4.子线程：可以手动开启
 1>.我们称为“子线程/后台线程/非主线程”
 2>.线程的状态：新建New/就绪Runnable/运行状态Running/阻塞Blocked/死亡dead
 */

@interface WMThreadViewController : UIViewController

@end

NS_ASSUME_NONNULL_END
