// 1.Groovy概述
// 1>.概述：Groovy是一种基于JVM的动态脚本语言（彻底兼容java）
// 2>.build配置文件（Groovy脚本文件）：可以写任何符合Groovy语法的代码（也能够写任何Java代码）
// 3>.参考1：http://www.noobyard.com/article/p-bkoscwth-a.html
// 4>.参考2：https://www.bootwiki.com/groovy/groovy-closures.html

// 2.注释
// 单行注释
/*
多行注释
*/
/**
 * 文档注释
 * @param String name
 */

// 3.数据类型：与java一致
// 1>.支持java的基本数据类型、可以显示声明、";"可以省略
int a
// 2>.使用def声明：进行类型推导
def a1
// 3>.字符串
// 使用单引号和双引号均可以定义一个字符串常量
def a2 = '123'
def a3 = "123"
// 字符串拼接
// ${str}
println("这是你的数字：${a3}") // 这是你的数字：123
println('这是你的数字：${a3}') // 这是你的数字：${a3}

// 4.集合
// 默认集合类型ArrayList
def a4 = [1, 2, 3, 4]
println("size is ${a4.size()}")
// 指定集合类型
// LinkedList
def a5 = [1, 2, 3, 4] as LinkedList
println("a5 is ${a5.getClass().getName()}")
LinkedList a6 = [1, 2, 3, 4]
// 访问元素
println(a5[0]) // 第一个元素
println(a5[-1]) // 倒数第一个元素
println(a5[0, -1]) // 第一个元素 && 倒数第一个元素
println(a5[1..3]) // 第二个元素到第四个元素
// 遍历元素
a5.each {
    // 参数默认是it
    println($it)
}
a5.eachWithIndex{ int value, int index ->
    
}
// 数组
def modules = ["123", "xwj", "18"] as String[]
String[] webSites = ['Taobao', 'Google', 'ByteDance', 'Tencent'] // 数组的定义必须明确的指定数组类型
modules.add("website")
modules[1] = "cfj"
modules.remove("cfj")
modules.remove(1)
// 查找第一个符合条件的元素
modules.find {
    it % 2 == 0
}
// 查找全部符合条件的元素
modules.findAll {
    it % 2 == 0
}
// 只要有一个元素符合条件就返回true
modules.any {
    it % 2 == 0
}
// 全部元素都符合条件才会返回true
modules.every {
    it % 2 == 0
}
// 统计符合条件的元素个数
modules.count {
    it % 2 == 0
}
// 最大值
modules.max()
// 最小值
modules.min()
// 不用担忧下标越界：Groovy会自动增长到所需要的下标（中间的元素设置为null）

// 5.Map
def colors = [red: "#FF0000", green: "#00FF00", blue: "#0000FF"]
println(colors.red)
println(colors["red"])
println(colors.get("red"))
// 添加元素
colors["pink"] = "#FF00FF"
colors.yellow = "#FFFF00"
// 修改元素
colors.red = "red"
// 删除元素
colors.remove("red")
// 遍历
colors.each {
    println("key is ${it.key}: value is ${it.value}")
}
// 查找
def green = colors.find { key, value ->
    if (key.equals('green')) {
        return value
    }
    return null
}

// 6.方法
def max(int a, int b) {
    colors.find { key, value ->
        if (key.equals('green')) {
            return value
        }
        // 可以省略return：Groovy可以将最后一句代码做为返回值
        return null
    }
}
def min(a, b) {

}

// 7.闭包：匿名代码块
// 1>.定义闭包：闭包可以赋值给一个变量
def hello = {
    // 可以省略()
    println "hello world"
}
// 2>.调用闭包
hello.call()
hello()
// 3>.闭包做为方法参数
// 第一种：闭包只有一个参数（如果闭包只有一个参数，默认就是it）
def customEach(closure) {
    // 如果闭包只有一个参数；默认为it
    for (int index in 1..10) {
        // 调用闭包
        closure(index)
    }
}
// 传入闭包
customEach({
    println(it)
})
// 最后一个参数是闭包：可以将闭包放在方法外面
customEach() {
    println(it)
}
// 调用的时候可以省略()
customEach {
    println(it)
}
// 第二种：闭包有多个参数
def eachMap(closure) {
    def map1 = [red: "#FF0000", green: "#00FF00", blue: "#0000FF"]
    map1.each {
        closure(it.key, it.value)
    }
}
// 调用闭包
eachMap {key, value -> 
    println("key is $key, value is $value")
}
// 6>.闭包委托
// xxx
// 7>.委托策略
// xxx

// 9.类
task obj {
    doLast {
        Person p = new Person()
        p.name = "xwj"
        println("age is $age")
        def name = p.name ?: "123" // 可空运算符：p.name == null则返回"123"，否则返回p.name
        def name1 = p?.name // 安全导航导航符：p == null不会抛出异常，整个表达式为null
    }
}
class Person {
    // Groovy自动搞定setter和getter方法
    private String name

    // 定义了getter方法就可以使用age属性
    // 但是无法使用setter方法
    public int getAge() {
        12
    }
}

// 10.断言
// // 1>.Groovy断言是一项语言功能，一直处于开启状态
// // 2>.若假设的条件不为真，就会抛出java.lang.AssertionError异常
// // 3>.单元测试的首选方式
// assert 1 == 2 : "1不等于2"
// assert 1 == 2  // 可以不给消息提示

// 11.运行须知
// 1>.安装Gradle才可以使用gradle、./gradle、gradlew命令
// 2>.build.gradle是Gradle的默认构建脚本文件，在执行Gradle命令的时候会默认找在当前目录下的build.gradle文件
// 3>.指定加载执行文件：gradle -b groovy-basic.gradle operator // 执行groovy-basic.gradle里的operator任务
task test {
    doLast {
        // 代码
    }
}